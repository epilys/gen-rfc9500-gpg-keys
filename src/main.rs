use std::io::Write;
use std::time::SystemTime;

use openpgp::packet::key::Key4;
use openpgp::packet::key::{PrimaryRole, UnspecifiedRole};
#[allow(unused_imports)]
use openpgp::packet::key::{PublicParts, SecretParts};
use openpgp::packet::Key;
use openpgp::serialize::stream::Armorer;
use openpgp::serialize::stream::Message;
use openpgp::serialize::SerializeInto;
use openpgp::Packet;
use openpgp::Result;
use sequoia_openpgp as openpgp;

fn main() -> Result<()> {
    env_logger::init();

    let d = &[
        0x41, 0x18, 0x8B, 0x20, 0xCF, 0xDB, 0xDB, 0xC2, 0xCF, 0x1F, 0xFE, 0x75, 0x2D, 0xCB, 0xAA,
        0x72, 0x39, 0x06, 0x35, 0x2E, 0x26, 0x15, 0xD4, 0x9D, 0xCE, 0x80, 0x59, 0x7F, 0xCF, 0x0A,
        0x05, 0x40, 0x3B, 0xEF, 0x00, 0xFA, 0x06, 0x51, 0x82, 0xF7, 0x2D, 0xEC, 0xFB, 0x59, 0x6F,
        0x4B, 0x0C, 0xE8, 0xFF, 0x59, 0x70, 0xBA, 0xF0, 0x7A, 0x89, 0xA5, 0x19, 0xEC, 0xC8, 0x16,
        0xB2, 0xF4, 0xFF, 0xAC, 0x50, 0x69, 0xAF, 0x1B, 0x06, 0xBF, 0xEF, 0x7B, 0xF6, 0xBC, 0xD7,
        0x9E, 0x4E, 0x81, 0xC8, 0xC5, 0xA3, 0xA7, 0xD9, 0x13, 0x0D, 0xC3, 0xCF, 0xBA, 0xDA, 0xE5,
        0xF6, 0xD2, 0x88, 0xF9, 0xAE, 0xE3, 0xF6, 0xFF, 0x92, 0xFA, 0xE0, 0xF8, 0x1A, 0xF5, 0x97,
        0xBE, 0xC9, 0x6A, 0xE9, 0xFA, 0xB9, 0x40, 0x2C, 0xD5, 0xFE, 0x41, 0xF7, 0x05, 0xBE, 0xBD,
        0xB4, 0x7B, 0xB7, 0x36, 0xD3, 0xFE, 0x6C, 0x5A, 0x51, 0xE0, 0xE2, 0x07, 0x32, 0xA9, 0x7B,
        0x5E, 0x46, 0xC1, 0xCB, 0xDB, 0x26, 0xD7, 0x48, 0x54, 0xC6, 0xB6, 0x60, 0x4A, 0xED, 0x46,
        0x37, 0x35, 0xFF, 0x90, 0x76, 0x04, 0x65, 0x57, 0xCA, 0xF9, 0x49, 0xBF, 0x44, 0x88, 0x95,
        0xC2, 0x04, 0x32, 0xC1, 0xE0, 0x9C, 0x01, 0x4E, 0xA7, 0x56, 0x60, 0x43, 0x4F, 0x1A, 0x0F,
        0x3B, 0xE2, 0x94, 0xBA, 0xBC, 0x5D, 0x53, 0x0E, 0x6A, 0x10, 0x21, 0x3F, 0x53, 0xB6, 0x03,
        0x75, 0xFC, 0x84, 0xA7, 0x57, 0x3F, 0x2A, 0xF1, 0x21, 0x55, 0x84, 0xF5, 0xB4, 0xBD, 0xA6,
        0xD4, 0xE8, 0xF9, 0xE1, 0x7A, 0x78, 0xD9, 0x7E, 0x77, 0xB8, 0x6D, 0xA4, 0xA1, 0x84, 0x64,
        0x75, 0x31, 0x8A, 0x7A, 0x10, 0xA5, 0x61, 0x01, 0x4E, 0xFF, 0xA2, 0x3A, 0x81, 0xEC, 0x56,
        0xE9, 0xE4, 0x10, 0x9D, 0xEF, 0x8C, 0xB3, 0xF7, 0x97, 0x22, 0x3F, 0x7D, 0x8D, 0x0D, 0x43,
        0x51,
    ];
    let p = &[
        0xDD, 0x10, 0x57, 0x02, 0x38, 0x2F, 0x23, 0x2B, 0x36, 0x81, 0xF5, 0x37, 0x91, 0xE2, 0x26,
        0x17, 0xC7, 0xBF, 0x4E, 0x9A, 0xCB, 0x81, 0xED, 0x48, 0xDA, 0xF6, 0xD6, 0x99, 0x5D, 0xA3,
        0xEA, 0xB6, 0x42, 0x83, 0x9A, 0xFF, 0x01, 0x2D, 0x2E, 0xA6, 0x28, 0xB9, 0x0A, 0xF2, 0x79,
        0xFD, 0x3E, 0x6F, 0x7C, 0x93, 0xCD, 0x80, 0xF0, 0x72, 0xF0, 0x1F, 0xF2, 0x44, 0x3B, 0x3E,
        0xE8, 0xF2, 0x4E, 0xD4, 0x69, 0xA7, 0x96, 0x13, 0xA4, 0x1B, 0xD2, 0x40, 0x20, 0xF9, 0x2F,
        0xD1, 0x10, 0x59, 0xBD, 0x1D, 0x0F, 0x30, 0x1B, 0x5B, 0xA7, 0xA9, 0xD3, 0x63, 0x7C, 0xA8,
        0xD6, 0x5C, 0x1A, 0x98, 0x15, 0x41, 0x7D, 0x8E, 0xAB, 0x73, 0x4B, 0x0B, 0x4F, 0x3A, 0x2C,
        0x66, 0x1D, 0x9A, 0x1A, 0x82, 0xF3, 0xAC, 0x73, 0x4C, 0x40, 0x53, 0x06, 0x69, 0xAB, 0x8E,
        0x47, 0x30, 0x45, 0xA5, 0x8E, 0x65, 0x53, 0x9D,
    ];
    let q = &[
        0xCC, 0xF1, 0xE5, 0xBB, 0x90, 0xC8, 0xE9, 0x78, 0x1E, 0xA7, 0x5B, 0xEB, 0xF1, 0x0B, 0xC2,
        0x52, 0xE1, 0x1E, 0xB0, 0x23, 0xA0, 0x26, 0x0F, 0x18, 0x87, 0x55, 0x2A, 0x56, 0x86, 0x3F,
        0x4A, 0x64, 0x21, 0xE8, 0xC6, 0x00, 0xBF, 0x52, 0x3D, 0x6C, 0xB1, 0xB0, 0xAD, 0xBD, 0xD6,
        0x5B, 0xFE, 0xE4, 0xA8, 0x8A, 0x03, 0x7E, 0x3D, 0x1A, 0x41, 0x5E, 0x5B, 0xB9, 0x56, 0x48,
        0xDA, 0x5A, 0x0C, 0xA2, 0x6B, 0x54, 0xF4, 0xA6, 0x39, 0x48, 0x52, 0x2C, 0x3D, 0x5F, 0x89,
        0xB9, 0x4A, 0x72, 0xEF, 0xFF, 0x95, 0x13, 0x4D, 0x59, 0x40, 0xCE, 0x45, 0x75, 0x8F, 0x30,
        0x89, 0x80, 0x90, 0x89, 0x56, 0x58, 0x8E, 0xEF, 0x57, 0x5B, 0x3E, 0x4B, 0xC4, 0xC3, 0x68,
        0xCF, 0xE8, 0x13, 0xEE, 0x9C, 0x25, 0x2C, 0x2B, 0x02, 0xE0, 0xDF, 0x91, 0xF1, 0xAA, 0x01,
        0x93, 0x8D, 0x38, 0x68, 0x5D, 0x60, 0xBA, 0x6F,
    ];
    let key: Key4<_, UnspecifiedRole> =
        Key4::import_secret_rsa(d, p, q, SystemTime::UNIX_EPOCH).unwrap();

    let mut stdout = std::io::stdout();
    {
        let secret_part: Key4<SecretParts, PrimaryRole> = key.clone().role_into_primary();

        let packet = Packet::from(Key::from(secret_part));
        let packet = packet.to_vec().expect("serializing to a vec is infallible");

        let message = Message::new(&mut stdout);
        let mut message = Armorer::new(message)
            .kind(openpgp::armor::Kind::SecretKey)
            .build()?;
        message.write_all(&packet)?;
        message.finalize()?;
    }
    {
        let public_part: Key4<PublicParts, PrimaryRole> =
            key.clone().parts_into_public().role_into_primary();
        let packet = Packet::from(Key::from(public_part));
        let packet = packet.to_vec().expect("serializing to a vec is infallible");
        let message = Message::new(&mut stdout);
        let mut message = Armorer::new(message)
            .kind(openpgp::armor::Kind::PublicKey)
            .build()?;
        message.write_all(&packet)?;
        message.finalize()?;
    }

    Ok(())
}
